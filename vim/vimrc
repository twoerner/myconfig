set nocompatible
set wildmode=full
set wildmenu
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()

" persistent undo
set undodir=~/.vim/undodir
set undofile

" colour
set background=dark
syntax on
highlight DiffAdd cterm=none ctermfg=Black ctermbg=Green gui=none guifg=bg guibg=Green
highlight DiffDelete cterm=none ctermfg=Black ctermbg=Red gui=none guifg=bg guibg=Red
highlight DiffChange cterm=none ctermfg=Black ctermbg=Yellow gui=none guifg=bg guibg=Yellow
highlight DiffText cterm=none ctermfg=Black ctermbg=Magenta gui=none guifg=bg guibg=Magenta
highlight LineNr term=NONE cterm=NONE ctermfg=DarkGrey ctermbg=Black gui=NONE guifg=DarkGrey guibg=NONE
colo casu1dark

" keyboard hacks for backspace etc
set visualbell t_vb=
set t_kb=
fixdel
set bs=2

set ai			" autoindent
set copyindent		" copy the previous indentation on autoindenting
"set expandtab

set ruler		" let the last line indicate information (filename, mode, position)
set number		" show line numbers
"set numberwidth=5

set noincsearch
set nohlsearch
set noshowmatch
set ignorecase
set smartcase		" ignore case if search string is all lowercase, don't ignore case otherwise
set scrolloff=5		" always show at least <n> lines at top and bottom
set hidden		" allow switch to new buffer even if current is not saved (i.e. when using tags)
set pastetoggle=<F2>	" hit <F2> before and after pasting to temporarily turn off autoindent (etc)
"set mouse=a		" enables the scroll wheel to work (but messes up mouse pasting)
let loaded_matchparen = 1

" spell checking
:setlocal spelllang=en_ca
nmap <silent> <Leader>s :set spell!<CR>

" the following is good for regular text
set formatprg=Par\ w78
" the following is better for C-style, multi-line comments
"set formatprg=Par\ r

set nobackup
set viminfo=""
set tags=./tags,tags;

" use ":set list" and ":set nolist" to display or remove
set lcs=tab:>-,trail:#,eol:$

" key remapping
" NOTE: <Leader> = '\' by default
" the following toggles the following behaviour:
"   if you press <Leader>zz (e.g. \zz) then the cursor remains in the middle of the screen
"   pressing <Leader>zz again turns this off
nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>

" vimgrep for term under cursor with <F3>
nmap <F3> :vimgrep /<C-R><C-W>/ **/*

" the following 4 allow you go use (for example) Ctrl-h instead of Ctrl-w+h to move between buffers
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" status line
set laststatus=2
set statusline=%<%f\ %h%m%r\ %{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

nnoremap <F5> :GundoToggle<CR>

if has("autocmd")
	" general autocmd stuff
	augroup cprog
		" Remove all cprog autocommands
		au!

		" When starting to edit a file:
		"   For C and C++ files set formatting of comments and set C-indenting on.
		"   For other files switch it off.
		"   Don't change the order, it's important that the line with * comes first.
		autocmd FileType *      set formatoptions=tcql nocindent comments&
		" having 'a' in the formatoptions is great, but messes me up too often
		autocmd FileType c,cpp,cc  set formatoptions=croqj tw=78 cindent autoindent
		autocmd FileType gitcommit set formatoptions=tn tw=78
	augroup END

	autocmd BufReadPost fugitive://* set bufhidden=delete

	" some specific autocmd stuff for all files
	autocmd BufNewFile *.c,*.cpp,*.cc,*.h,*.hh,*.hpp,*.css,*.s call NewFileC()
	autocmd BufNewFile configure.ac call NewConfigureIn()
	autocmd BufNewFile Makefile.am call NewMakefileAm()
	autocmd BufNewFile Doxyfile.in call NewDoxyfileIn()
	autocmd BufNewFile CheckLog.xsl call NewCheckLogXSL()
	autocmd BufNewFile *.pc.in call NewPackageIn()
	autocmd BufNewFile stylesheet.dsl call NewStylesheet()
	autocmd BufNewFile *.sgml,*.html,*.shtml call NewFileSGML()
	autocmd BufNewFile *.latex call NewFileLaTeX()
	autocmd BufNewFile *.asm call NewFileAsm()
	autocmd BufNewFile *.py call NewFilePython()
	autocmd BufNewFile Imakefile call NewImakefile()
	autocmd BufNewFile getgcov.sh call NewGetGcov()
	autocmd BufNewFile,BufRead *.stp call STap()
	autocmd BufRead,BufNew,BufNewFile ~/.mutt/tmp/mutt* source ~/.mutt/configlets/vim.compose-email
	autocmd BufNewFile,BufRead *.v :set filetype=verilog
	autocmd BufNewFile,BufRead * call SetLocalOptions(bufname("%"))

	" autocmd BufEnter *.c,*.cpp,*.cc colo cdesert
	" autocmd BufEnter *.h,*.chh,*.hh colo cdarkblue

	fun GetUserName()
		let l:user_name = system ("git config --get user.name")
		if v:shell_error
			return system ("echo $COPYRIGHTHOLDER")
		else
			return substitute (l:user_name, "\n", "", "")
		endfun

	fun GetUserEmail()
		let l:user_email = system ("git config --get user.email")
		if v:shell_error
			return
		else
			return substitute (l:user_email, "\n", "", "")
	endfun

	fun CpyRght()
		let l:user_name = GetUserName()
		let l:user_email = GetUserEmail()
		let l:year = strftime("%Y")
		return 'Copyright (C) ' . l:year . '  ' . l:user_name . ' <' . l:user_email . '>'
	endfun

	fun STap()
		set filetype=stap
		setlocal cindent
		setlocal cino=+0
	endfun

	fun NewConfigureIn()
		0 put='dnl ' . CpyRght()
		put=''
		2r $HOME/Data/myconfig/vim/template.configure.ac
	endfun

	fun NewMakefileAm()
		0 put='## ' . CpyRght()
		put=''
		2r $HOME/Data/myconfig/vim/template.Makefile.am
	endfun

	fun NewDoxyfileIn()
		0r $HOME/Data/myconfig/vim/template.Doxyfile.in
	endfun

	fun NewCheckLogXSL()
		0r $HOME/Data/myconfig/vim/template.CheckLog.xsl
	endfun

	fun NewPackageIn()
		0r $HOME/Data/myconfig/vim/template.pc.in
	endfun

	fun NewStylesheet()
		0r $HOME/Data/myconfig/vim/template.stylesheet.dsl
	endfun

	fun NewImakefile()
		0r $HOME/Data/myconfig/vim/template.Imakefile
		call InsertArgs()
	endfun

	fun NewFileC()
		0 put='/*'
		put=' * ' . CpyRght()
		put=' */'
		4
		set formatprg=Par\ r
	endfun

	fun NewFileLaTeX()
		0 put='% ' . CpyRght()
		2
	endfun

	fun NewFileAsm()
		0 put='; ' . CpyRght()
		2
	endfun

	fun NewFilePython()
		0 put='#! /usr/bin/env python3'
		put='## ' . CpyRght()
		put='## vim: sw=4 ts=4 sts=4 expandtab'
		4
	endfun

	fun NewFileSGML()
		0 put='<!--'
		put='  ' . CpyRght()
		put='  VIM OPTIONS: vim:ts=4:sw=4:sts=4:expandtab'
		put='-->'
		5
	endfun

	fun NewGetGcov()
		0r $HOME/Data/myconfig/vim/template.getgcov.sh
	endfun

	fun InsertArgs()
		let l:user_name = GetUserName()
		exe "1,2g/CopyrightYear/s/CopyrightYear/" . strftime("%Y") . "/g"
		exe "1,2g/CopyrightHolder/s/CopyrightHolder/" . l:user_name . "/g"
	endfun

	fun SetLocalOptions(fname)
		let dirname = fnamemodify(a:fname, ":p:h")
		while "/" != dirname
			let lvimrc  = dirname . "/.lvimrc"
			if filereadable(lvimrc)
				execute "source " . lvimrc
				break
			endif
			let dirname = fnamemodify(dirname, ":p:h:h")
		endwhile
	endfun

endif "autocmd
