This cheat sheet contains tips that are generic to a default install of
Vim, but also includes items which are specific to my vimrc configuration.

the default <leader> is \
stuff in angle brackets is to be replaced (including the angle brackets)

Using git (via fugitive)
	most git commands are available via fugitive by prefixing them
	with a capital 'G' in command mode

	:Glog
	:Gblame

	some commands place their results in the "quickfix" window

Quickfix Commands
	:copen		open quickfix at bottom of screen
	:45copen	open quickfix list with 45 lines
	]q		next item in quickfix list
	[q		previous item in quickfix list

General
	:%s/\s\+$//	trim whitespace at end of lines
	:retab		set tabs how you want them, highlight, then
			issue this command to change the tabs
	=		to re-indent, select area then issue command
	g{motion}	by default motion keys move up/down a line at
			a time (regardless of wrap), if you want to
			move up/down one visual line at a time prefix
			the motion with 'g'
	Ctrl-e		move text up w/o moving cursor
	Ctrl-y		move text down w/o moving cursor
	colorcolumn	there is an interesting thing called "colorcolumn"
			which will set a vertical bar down your page to tell
			you where a certain column is located
				:set colorcolumn=78
				:set colorcolumn=0
	:[range]t{addr}	copy a set of lines to addr
				e.g. :19t. copies line 19 to the line under
				           the line where your cursor is
				           presently located
	:[range]m{addr}	same as copy (above) but moves line(s) instead

Insert Mode
	Ctrl-w		delete the word before the cursor (works in bash too)
	Ctrl-u		delete the whole, current line (works in bash too)
	Ctrl-n/Ctrl-p	completion (up and down the list)
	Ctrl-x Ctrl-l	full line completion
	Ctrl-o		execute one cmd, return to insert mode

	* to find insert-mode help specifically, prefix a help query with 'i_'
	  e.g. :help i_^w (also works with 'v_' for visual mode)

Commandline Window
	q/		open cmdline window with search history
	q:		open cmdline window with command history
	Ctrl-f		switch from cmdline to cmdline window

Block Selection
	Ctrl-V		to select a block of of text, instead of just
			character-by-character or line-by-line

		once selected, use the following to

	c		change (delete and switch to insert mode)
	I		insert in front of cursor
	A		append after cursor
	r		replace every character in selection
	d		delete selection
	o		toggle cursor to opposite selection corner
	gw		format text (using formatprg)

Macros
	q<reg>		to start a macro hit 'q' then the register key,
			the register can be any letter a-z
	q		end the macro
	@<reg>		to replay the macro (can be prefixed with a count)

Spell Checking
	<leader>s	toggle spell check mode
	]s		move to next misspelled word
	[s		move to previous misspelled word
	z=		bring up list of suggestions for misspelled word
			under the cursor
	zg		add word to dictionary ('g'ood word)
	zw		mark word as bad

ctags
	Ctrl-]		follow a tag
	Ctrl-W ]	follow a tag into another buffer
	Ctrl-T		pop an entry off the 'follow' stack
	g]		show list of matches
	Ctrl-W g]	show list, open selected item in new window
	Ctrl-N		type part of an identifier, hit Ctrl-N (without having
			to switch to cmd mode) and vim offers a list of possible
			completions (:help complete-functions)

The Opposite of ctags
	Ctags are great if you are on a function and want to see its definition.
	But what if you want to see all places where a given function is called?
	A -> use vim's internal grep utility: vimgrep
	e.g.
	
		:vim /search/j **/*

	places the results in a 'quickfix' window
	to open this window:
	
		:copen

	better yet, just combine the whole thing into one line and open up a 45-line
	quickfix window with the results:

		:vimgrep /search/ **/* | :45copen
	
	while in this quickfix window use regular motion commands, hit enter on a line
	and be taken to that occurrence in a new buffer or hit

		[q

	to move to the previous entry or

		]q

	to move to the next quickfix entry

	I have mapped <F3> to start the vimgrep automatically on whatever word
	is under the cursor when it is pressed

Text Formatting
	start using 'Par' more often, is it ever handy!
	- set 'formatprg' to some external command (e.g. :set formatprg=Par)
	- highlight the line you want to affect (V/Ctrl-V + {motion})
	- hit 'gq' and the highlighted text is sent to the formatprg
	  and its output replaces the highlighted section
	NOTE: on openSuSE there already is a completely unrelated program
	      called 'par', openSuSE doesn't provide this 'Par', it can be found
	      https://build.opensuse.org/package/binary?arch=x86_64&filename=Par-1.52-8.45.x86_64.rpm&package=Par&project=home%3Aaljex&repository=openSUSE_Factory
	      and is called 'Par'

Writing/Building Code
	since i always build my code in a location separate from where i write
	it, simply invoking

		:make
	
	will not work. however, if i change the 'make' command as follows:

		:set makeprg=make -C ~/path/to/build/dir
	
	now

		:make
	
	will work great and create a quickfix list for me. now that i have a
	quickfix list, the regular [q and ]q will work as usual

Folds
	if you have just opened a C file and would like all the functions/comments/etc
	folded just invoke

		:set foldmethod=syntax
	
	then, while looking through the code, to unfold a given section use

		zA

	and then zA again to fold it back up

	zi		toggle enabling/disabling all folds

Windows
	Ctrl-w_		set the current window to its maximum size
	Ctrl-w=		set all windows to (roughly) equal sizes
	Ctrl-{hjkl}	move to {left/down/up/right} window
