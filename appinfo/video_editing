i started by building my own ffmpeg, i'm not sure if i needed to, but
i think i built my own because the libx264 wasn't available with the
ffmpeg that came with my distro (openSUSE 15.2)

i built from git: https://git.ffmpeg.org/ffmpeg.git
i built from git master: 8205f32663ec492200cdd47216719be15e92fcdb
	
i believe my configure flags were:

./configure \
	--prefix=/home/trevor/local/packages/ffmpeg \
	--extra-cflags='-fPIC -fmessage-length=0 -grecord-gcc-switches -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -g' \
	--optflags='-fPIC -fmessage-length=0 -grecord-gcc-switches -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -fstack-clash-protection -g' \
	--disable-htmlpages \
	--enable-pic \
	--disable-stripping \
	--enable-shared \
	--disable-static \
	--enable-gpl \
	--disable-openssl \
	--enable-gnutls \
	--enable-ladspa \
	--enable-libass \
	--enable-libcelt \
	--enable-libdc1394 \
	--enable-libfreetype \
	--enable-libgsm \
	--enable-libmp3lame \
	--enable-libopenjpeg \
	--enable-libopus \
	--enable-libpulse \
	--enable-libspeex \
	--enable-libtheora \
	--enable-libtwolame \
	--enable-libvidstab \
	--enable-libvorbis \
	--enable-libvpx \
	--enable-libwebp \
	--enable-libzimg \
	--enable-libzvbi \
	--enable-vdpau \
	--enable-libopencore-amrnb \
	--enable-libopencore-amrwb \
	--enable-version3 \
	--enable-libx264 \
	--enable-libx265 \
	--enable-libxvid
	2>&1 | tee LOG.configure


it required me to install the -devel package for a whole lot of packages!!!


-------------
watch the entire video stream and figure out the begin/end time-stamps
for the various talks/sections. For example: if the entire video is 3.5
hrs long, is named "full.mp4", and:

	talk #1 => start=4:12 end=16:36
	...
	talk #6 => start=2:29:24 end=3:10:39

$ export FFMPEG="-c:v libx264 -c:a aac -strict experimental -b:a 128k"
$ ffmpeg -i full.mp4 -ss 4:12 -to 16:36 $FFMPEG talk1.mp4
...
$ ffmpeg -i full.mp4 -ss 2:29:24 -to 3:10:39 $FFMPEG talk6.mp4

NOTE: fraction seconds can be used if required. e.g.: 2:29:24.5


-------------
to take a still image and make a 3 second video from it (ready to prepend/apend)

$ ffmpeg \
	-framerate 25 -loop 1 -i 012-1810-SLIDES-case_study__yocto_openembedded_in_all_scenarios_os.png \
	-c:v libx264 -t 3 -pix_fmt yuv420p \
	picture.mp4

NOTE: i took the pdf, imported it into libreoffice (impress, the slide
      making tool), then selected the entire first slide. make sure
      to select all the content of the main image (Ctrl-A) and not just,
      say, the backing image

NOTE: when i exported it from libreoffice impress, it asked me about the
      image details (size, resolution, etc) i chose 72 pix/in for the
      resolution and then made the width 20 (i think, or something like
      that, i remember the original width, upped the resolution, then
      bumped up the size to get back to 2x the original size). this
      was necessary otherwise the slide looks really blurry in the movie.

NOTE: make sure the image canvas size matches the size of the video.
      use gimp. in gimp:
      		Image → Canvas Size…
      break the coupling if you have to.
      use ffprobe to get the size of the video


-------------
to add a still image to the front (and back) of a video:

- take a still image and make an N second video out of it by using the
  tips and tricks from the above item
- make sure the size of the image (e.g. 3768x2126) is the same size as
  the video to which you're about to prepend it
- then run:

$ ffmpeg \
	-i picture.mp4 -i 04-allscenarios.mp4 -f lavfi -t 0.1 -i anullsrc \
	-filter_complex "[0][2][1:v][1:a][0][2]concat=n=3:v=1:a=1[v][a]" -map "[v]" -map "[a]" \
	output.mp4

-i picture.mp4               input, picture movie, index 0
-i 04-allscenarios.mp4       input, movie to which we're prepending, index 1
-f lavfi -t 0.1 -i anullsrc  input, empty sound, the picture.mp4 movie needs a sound track, generate and add a null sound track to it
-filter_complex              this is where the magic happens
[0]   is the video-only picture.mp4
[2]   is the blank audio-only generated by anullsnd
[1:v][1:a]  is the video and audio of input index [1] = 04-allscenarios.mp4

	"[0][2][1:v][1:a][0][2]" causes picture.mp4 to be both prepended and appended to 04-allscenarios.mp4

if all you want is a prepend then use:

	"[0][2][1:v][1:a]"



-------------
to take that still image and create a fade-in and fade-out

$ ffmpeg -i picture.mp4 -vf 'fade=in:0:3' $FFMPEG fadein.mp4
$ ffmpeg -i picture.mp4 -vf 'fade=out:20:30' $FFMPEG fadeout.mp4

NOTE: the specific values used assume the "picture" movie is 3 seconds long


-------------
to add the fade-in and fade-out to the start and end of the main video

$ ffmpeg \
	-i fadein.mp4 -i fadeout.mp4 -i allscenarios.mp4 -f lavfi -t 0.1 -i anullsrc \
	-filter_complex "[0][3][2:v][2:a][1][3]concat=n=3:v=1:a=1[v][a]" -map "[v]" -map "[a]" \
	output.mp4
